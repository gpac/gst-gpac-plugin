name: "Plugin Dependencies"
description: "Install dependencies for the plugin"

inputs:
  for-test:
    description: "Whether the plugin is being built for testing"
    required: false
    default: false
    type: boolean

runs:
  using: "composite"
  steps:
    - name: Install GPAC on Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://dist.gpac.io/gpac/linux/gpg.asc | \
          gpg --dearmor | sudo tee /etc/apt/keyrings/gpac.gpg > /dev/null
        sudo chmod a+r /etc/apt/keyrings/gpac.gpg

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/gpac.gpg] https://dist.gpac.io/gpac/linux/ubuntu/ \
          $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") nightly" | \
          sudo tee /etc/apt/sources.list.d/gpac.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y libgpac-dev
    - name: Install GPAC on macOS
      shell: bash
      if: runner.os == 'macOS'
      run: brew install --head gpac

    - name: Install GStreamer on Linux
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

    - name: Set up Homebrew
      if: runner.os == 'macOS'
      uses: Homebrew/actions/setup-homebrew@a3c8a0854142dbf3bade2bf77d5c26855a243034

    - name: Install GStreamer on macOS
      shell: bash
      if: runner.os == 'macOS'
      run: |
        brew install gstreamer-development
        echo "PKG_CONFIG_PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/lib/pkgconfig:$(pkg-config --variable pc_path pkg-config)" >> $GITHUB_ENV
        echo "PATH=/Library/Frameworks/GStreamer.framework/Versions/1.0/bin:$PATH" >> $GITHUB_ENV

    - name: Retrieve gst-plugins-rs HEAD commit
      if: inputs.for-test == 'true'
      id: gst-commit
      shell: bash
      run: |
        head_sha=$(git ls-remote https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs.git HEAD | awk '{ print $1 }')
        echo "gst-commit=$head_sha" >> $GITHUB_OUTPUT

    - name: Cache gst
      if: inputs.for-test == 'true'
      id: cache-gst
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/gst-plugins-rs
        key: gst-${{ runner.os }}-${{ runner.arch }}-${{ steps.gst-commit.outputs.gst-commit }}
        restore-keys: |
          gst-${{ runner.os }}-${{ runner.arch }}-

    - name: Install Rust
      if: inputs.for-test == 'true' && steps.cache-gst.outputs.cache-hit != 'true'
      uses: dtolnay/rust-toolchain@38b70195107dddab2c7bbd522bcf763bac00963b

    - name: Install build dependencies
      if: inputs.for-test == 'true' && steps.cache-gst.outputs.cache-hit != 'true'
      shell: bash
      run: |
        if [[ ${{ runner.os }} == 'macOS' ]]; then
          brew install cargo-c meson
        else
          sudo apt-get install -y python3 python3-pip python3-setuptools python3-wheel python3-mesonpy ninja-build
          cargo install cargo-c
        fi

    - name: Clone gst-plugins-rs
      if: inputs.for-test == 'true' && steps.cache-gst.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ runner.temp }}
      run: |
        if [ -d gst-plugins-rs ]; then
          cd gst-plugins-rs
          git clean -fdx
          git pull
        else
          git clone --depth 1 https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs.git
        fi

    - name: Compile cmafmux element
      if: inputs.for-test == 'true' && steps.cache-gst.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ runner.temp }}/gst-plugins-rs
      run: |
        meson setup build -Dauto_features=disabled -Dfmp4=enabled
        meson compile -C build

    - name: Install cmafmux element
      if: inputs.for-test == 'true'
      shell: bash
      working-directory: ${{ runner.temp }}/gst-plugins-rs/build
      run: |
        dst_dir=$HOME/.local/share/gstreamer-1.0/plugins
        mkdir -p $dst_dir
        if [[ ${{ runner.os }} == 'macOS' ]]; then
          cp libgstfmp4.dylib $dst_dir/
        else
          cp libgstfmp4.so $dst_dir/
        fi
